using Cadbury.Inventor.Core.Domain.DAL;
using System;
using System.Collections.Generic;
using System.Linq;

namespace Cadbury.Inventor.Core.Domain.Manager
{
	public class <Entity>Manager
	{
		public static int Count(ContextType contextType = ContextType.Default)
		{
			using (var context = ContextSwitcher.CreateContext(contextType))
			{
				return context.<EntitySet>.Count();
			}
		}

		public static void Insert(<Entity> entity, ContextType contextType = ContextType.Default)
		{
			using (var context = ContextSwitcher.CreateContext(contextType))
			{
				context.<EntitySet>.Add(entity);
				context.SaveChanges();
			}
		}
		
		public static void Update(<Entity> entity, ContextType contextType = ContextType.Default)
		{
			using (var context = ContextSwitcher.CreateContext(contextType))
			{
				context.Entry(entity).State = EntityState.Modified;
				context.SaveChanges();
			}
		}

		public static void Delete(<Entity> entity, ContextType contextType = ContextType.Default)
		{
			using (var context = ContextSwitcher.CreateContext(contextType))
			{
				context.<EntitySet>.Remove(entity);
				context.SaveChanges();
			}
		}

		public static IList<<Entity>> Get(ContextType contextType = ContextType.Default)
		{
			using (var context = ContextSwitcher.CreateContext(contextType))
			{
				return context.<EntitySet>
					.OrderByDescending(e => e.CreatedOn)
					.ToList();
			}
		}

		public static List<<Entity>> Get(int startIndex, int pageSize, ContextType contextType = ContextType.Default)
		{
			return Get()
				.Skip(startIndex)
				.Take(pageSize)
				.ToList();
		}
	}
}
